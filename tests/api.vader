" todo keywords {{{
Given org (Headlines with todo):
  #+TODO: A B | C D E

Execute (org#get_todo_keywords()):
  AssertEqual ['A', 'B', 'C', 'D', 'E'], org#get_todo_keywords()

Execute (org#parse_todo_keywords(1)):
  AssertEqual ['A', 'B', 'C', 'D', 'E'], org#parse_todo_keywords(1)

" }}}
" Headlines {{{

Execute (org#headline#checktext(text)):
  Assert org#headline#checktext('* This is a headline')
  Assert org#headline#checktext('** This is a headline')
  Assert !org#headline#checktext(' * This is not a headline')

Given org (Some headlines):
  * A headline            1
  Not a headline          2
    * Also not a headline 3

  ** Another headline     5

Execute (org#headline#checkline(lnum)):
  Assert org#headline#checkline(1)
  Assert !org#headline#checkline(2)
  Assert !org#headline#checkline(3)
  Assert !org#headline#checkline(4)
  Assert org#headline#checkline(5)

Given org (Headlines with todo):
  #+TODO: A | B
  * A A headline 2
  * B A headline 3
  * C A headline 4

" fails the added things, as this doesn't create a 'file' and we're caching.
Execute (org#headline#has_keyword):
  Assert org#headline#has_keyword(getline(2))
  Assert org#headline#has_keyword(getline(3))
  Assert !org#headline#has_keyword(getline(4))

Execute (org#headline#keyword(text)):
  AssertEqual 'A', org#headline#keyword(getline(2))
  AssertEqual 'B', org#headline#keyword(getline(3))

Given org (Headlines):
  Not a headline 1
  * A headline   2
  Not a headline 3
  ** A headline  4
  * A headline   5
  Not a headline 6

Execute (org#headline#find(lnum, same_level)):
  AssertEqual 2, org#headline#find(1, 0)
  AssertEqual 2, org#headline#find(2, 0)
  AssertEqual 4, org#headline#find(3, 0)
  AssertEqual 4, org#headline#find(4, 0)
  AssertEqual 5, org#headline#find(5, 0, 'W')
  AssertEqual 2, org#headline#find(6, 0, 'w')
  AssertEqual 2, org#headline#find(1, 2)
  AssertEqual 5, org#headline#find(3, 1)
  AssertEqual 5, org#headline#find(1, 0, 'bw')
  AssertEqual 0, org#headline#find(1, 0, 'bW')
  AssertEqual 2, org#headline#find(2, 0, 'bW')
  AssertEqual 2, org#headline#find(3, 0, 'b')
  AssertEqual 4, org#headline#find(4, 0, 'b')
  AssertEqual 5, org#headline#find(5, 0, 'b')
  AssertEqual 5, org#headline#find(6, 1, 'b')
  AssertEqual 2, org#headline#find(4, 1, 'b')

Execute (org#headline#level(lnum, ...)):
  AssertEqual 0,      org#headline#level(1)
  AssertEqual [1, 2], org#headline#level(2, 1)
  AssertEqual [1, 2], org#headline#level(3, 1)
  AssertEqual 2,      org#headline#level(4)
  AssertEqual 1,      org#headline#level(5)

Execute (org#section#range(lnum, inner)):
  AssertEqual 0,      org#section#range(1)[0]
  AssertEqual [2, 4], org#section#range(2)
  AssertEqual [2, 4], org#section#range(3, 0)
  AssertEqual [4, 4], org#section#range(4, 0)
  AssertEqual [5, 5], org#section#range(5, 0)
  AssertEqual [3, 4], org#section#range(2, 1)
  AssertEqual [3, 4], org#section#range(3, 1)
  AssertEqual 0,      org#section#range(4, 1)[0]

" " " Execute (org#motion_headline(count1, direction, same)):

" " " Execute (org#operator_headline(inner)):

" " " Execute (org#visual_headline(inner)):


" " " }}}

" Lists {{{

Execute (org#list#has_checkbox(text)):
  Assert  org#list#has_checkbox('- [ ] List item')
  Assert !org#list#has_checkbox('[ ] Not list item')

Execute (org#list#has_check(text)):
  Assert !org#list#has_check('- [ ] List item')
  Assert  org#list#has_check('- [x] List item')
  Assert  org#list#has_check('- [X] List item')
  Assert !org#list#has_check('[X] Not list item')

Execute (org#list#has_ordered_header(text)):
  Assert  org#list#has_ordered_header(' 1) list')
  Assert  org#list#has_ordered_header(' 1. list')
  Assert  org#list#has_ordered_header(' a) list')
  Assert  org#list#has_ordered_header(' a. list')
  Assert  org#list#has_ordered_header(' 10) list')
  Assert !org#list#has_ordered_header(' aa) list')

Execute (org#list#has_bullet_header(text)):
  Assert  org#list#has_bullet_header('- list')
  Assert  org#list#has_bullet_header('-')
  Assert !org#list#has_bullet_header('*')
  Assert  org#list#has_bullet_header(' *')
  Assert  org#list#has_bullet_header(' + list')

Execute (org#list#has_header(text)):
  Assert  org#list#has_header('- list')
  Assert  org#list#has_header('-')
  Assert !org#list#has_header('*')
  Assert  org#list#has_header(' *')
  Assert  org#list#has_header(' + list')
  Assert  org#list#has_header(' 1) list')
  Assert  org#list#has_header(' a) list')
  Assert  org#list#has_header(' 10) list')

Given org (List);
- List item        1
- List item        2
  which is a long  3
  item             4
* A headline       5
  + List item      6
  1) List item     7
  20) List item    8
     still list    9
    + nested item  10
      - nest item  11
      a) nest item 12

Execute (org#list#item_range(lnum)):
  AssertEqual [1, 1], org#list#item_range(1)
  AssertEqual [2, 4], org#list#item_range(2)
  AssertEqual [2, 4], org#list#item_range(3)
  AssertEqual [2, 4], org#list#item_range(4)
  AssertEqual [0, 0], org#list#item_range(5)
  AssertEqual [6, 6], org#list#item_range(6)
  AssertEqual [7, 7], org#list#item_range(7)
  AssertEqual [8, 12], org#list#item_range(8)
  AssertEqual [8, 12], org#list#item_range(9)
  AssertEqual [10, 12], org#list#item_range(10)
  AssertEqual [11, 11], org#list#item_range(11)
  AssertEqual [12, 12], org#list#item_range(12)

Execute (org#list#item_start(lnum)):
  AssertEqual 1, org#list#item_start(1)
  AssertEqual 2, org#list#item_start(2)
  AssertEqual 2, org#list#item_start(3)
  AssertEqual 2, org#list#item_start(4)
  AssertEqual 0, org#list#item_start(5)
  AssertEqual 6, org#list#item_start(6)
  AssertEqual 7, org#list#item_start(7)
  AssertEqual 8, org#list#item_start(8)
  AssertEqual 8, org#list#item_start(9)
  AssertEqual 10, org#list#item_start(10)
  AssertEqual 11, org#list#item_start(11)
  AssertEqual 12, org#list#item_start(12)

Execute (org#list#item_end(lnum)):
  AssertEqual 1, org#list#item_end(1)
  AssertEqual 4, org#list#item_end(2)
  AssertEqual 4, org#list#item_end(3)
  AssertEqual 4, org#list#item_end(4)
  AssertEqual 0, org#list#item_end(5)
  AssertEqual 6, org#list#item_end(6)
  AssertEqual 7, org#list#item_end(7)
  AssertEqual 12, org#list#item_end(8)
  AssertEqual 12, org#list#item_end(9)
  AssertEqual 12, org#list#item_end(10)
  AssertEqual 11, org#list#item_end(11)
  AssertEqual 12, org#list#item_end(12)

Execute (org#list#item_is_ordered(lnum)):
  Assert !org#list#item_is_ordered(1)
  Assert !org#list#item_is_ordered(2)
  Assert !org#list#item_is_ordered(3)
  Assert !org#list#item_is_ordered(4)
  Assert !org#list#item_is_ordered(5)
  Assert !org#list#item_is_ordered(6)
  Assert  org#list#item_is_ordered(7)
  Assert  org#list#item_is_ordered(8)
  Assert  org#list#item_is_ordered(9)
  " TODO: decide if 10 and 11 should return true, because parent
  Assert !org#list#item_is_ordered(10)
  Assert !org#list#item_is_ordered(11)
  Assert  org#list#item_is_ordered(12)

Execute (org#list#item_is_bullet(lnum)):
  Assert  org#list#item_is_bullet(1)
  Assert  org#list#item_is_bullet(2)
  Assert  org#list#item_is_bullet(3)
  Assert  org#list#item_is_bullet(4)
  Assert !org#list#item_is_bullet(5)
  Assert  org#list#item_is_bullet(6)
  Assert !org#list#item_is_bullet(7)
  Assert !org#list#item_is_bullet(8)
  Assert !org#list#item_is_bullet(9)
  Assert  org#list#item_is_bullet(10)
  Assert  org#list#item_is_bullet(11)
  Assert !org#list#item_is_bullet(12)

Execute (org#list#is_item(lnum)):
  Assert  org#list#is_item(1)
  Assert  org#list#is_item(2)
  Assert  org#list#is_item(3)
  Assert  org#list#is_item(4)
  Assert !org#list#is_item(5)
  Assert  org#list#is_item(6)
  Assert  org#list#is_item(7)
  Assert  org#list#is_item(8)
  Assert  org#list#is_item(9)
  Assert  org#list#is_item(10)
  Assert  org#list#is_item(11)
  Assert  org#list#is_item(12)

Execute (org#list#parent_item_range(lnum)):
  AssertEqual [0, 0], org#list#parent_item_range(1)
  AssertEqual [0, 0], org#list#parent_item_range(2)
  AssertEqual [0, 0], org#list#parent_item_range(3)
  AssertEqual [0, 0], org#list#parent_item_range(4)
  AssertEqual [0, 0], org#list#parent_item_range(5)
  AssertEqual [0, 0], org#list#parent_item_range(6)
  AssertEqual [0, 0], org#list#parent_item_range(7)
  AssertEqual [0, 0], org#list#parent_item_range(8)
  AssertEqual [0, 0], org#list#parent_item_range(9)
  AssertEqual [8, 12], org#list#parent_item_range(10)
  AssertEqual [10, 12], org#list#parent_item_range(11)
  AssertEqual [10, 12], org#list#parent_item_range(12)

Execute (org#list#level(lnum)):
  AssertEqual 1, org#list#level(1)
  AssertEqual 1, org#list#level(2)
  AssertEqual 1, org#list#level(3)
  AssertEqual 1, org#list#level(4)
  AssertEqual 0, org#list#level(5)
  AssertEqual 1, org#list#level(6)
  AssertEqual 1, org#list#level(7)
  AssertEqual 1, org#list#level(8)
  AssertEqual 1, org#list#level(9)
  AssertEqual 2, org#list#level(10)
  AssertEqual 3, org#list#level(11)
  AssertEqual 3, org#list#level(12)

Given org (Lists):
  - Item      1

  - Item      3
    text      4
  - Item      5
  + Item      6
    * Item    7
      1. Item 8
      3. Item 9
    * Item    10
  - Item      11


  - Item      14

Execute (org#list#find(lnum, 0)):
  AssertEqual 1, org#list#find(1, 0)
  AssertEqual 3, org#list#find(2, 0)
  AssertEqual 3, org#list#find(3, 0)
  AssertEqual 5, org#list#find(4, 0)
  AssertEqual 5, org#list#find(5, 0)
  AssertEqual 6, org#list#find(6, 0)
  AssertEqual 7, org#list#find(7, 0)
  AssertEqual 8, org#list#find(8, 0)
  AssertEqual 9, org#list#find(9, 0)
  AssertEqual 10, org#list#find(10, 0)
  AssertEqual 11, org#list#find(11, 0)
  AssertEqual 14, org#list#find(12, 0)

  AssertEqual 3, org#list#find(1, 1)
  AssertEqual 3, org#list#find(2, 1)
  AssertEqual 5, org#list#find(3, 1)
  AssertEqual 5, org#list#find(4, 1)
  AssertEqual 0, org#list#find(5, 1)
  AssertEqual 0, org#list#find(6, 1)
  AssertEqual 10, org#list#find(7, 1)
  AssertEqual 9, org#list#find(8, 1)
  AssertEqual 0, org#list#find(9, 1)
  AssertEqual 0, org#list#find(10, 1)
  AssertEqual 0, org#list#find(11, 1)

" " Execute (org#get_prev_listitem(lnum, ...)):

" " }}}

" " Execute (org#renumber_list()):

" " Execute (org#list#checkbox_add()):

" " Execute (org#list#checkbox_remove()):

" " Execute (org#list#checkbox_toggle()):

" " Execute (org#list#check_toggle()):

" " Execute (org#headline#cycle_keyword(direction)):

" " Execute (org#motion_listitem(count1, direction, same)):

" " Execute (org#operator_list()):

" " Execute (org#get_todo_keywords()):

" " Execute (org#build_keyword_cache()):

" " Execute (org#parse_todo_keywords(line)):

" " Execute (org#formatexpr()):

" " vim: set fdm=marker
