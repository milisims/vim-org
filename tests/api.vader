" todo keywords {{{
" Given org (Headlines with todo);
" #+TODO: A B | C D E

" Execute (org#get_todo_keywords()):
"   AssertEqual ['A', 'B', 'C', 'D', 'E'], org#get_todo_keywords()

" Execute (org#parse_todo_keywords(1)):
"   AssertEqual ['A', 'B', 'C', 'D', 'E'], org#parse_todo_keywords(1)

" }}}
" Headlines {{{


Execute (org#headline#parse(text)):
  AssertEqual {'TAGS': ['a', 'b'], 'PRIORITY': 'b', 'DONE': '', 'LEVEL': 2, 'TODO': 'B', 'ITEM': 'a b c'}, org#headline#parse('** B [#b] a b c :a:b:', {'todo': ['A', 'B'], 'done': ['C']})
  AssertEqual {'TAGS': [], 'PRIORITY': '', 'DONE': 'A', 'LEVEL': 1, 'TODO': '', 'ITEM': 'a b c'}, org#headline#parse('* A a b c', {'todo': ['B'], 'done': ['A']})

Execute (org#headline#checktext(text)):
  Assert org#headline#checktext('* This is a headline')
  Assert org#headline#checktext('** This is a headline')
  Assert !org#headline#checktext(' * This is not a headline')

Given org (Some headlines);
* A headline            1
Not a headline          2
  * Also not a headline 3

** Another headline     5

Execute (org#headline#checkline(lnum)):
  Assert org#headline#checkline(1)
  Assert !org#headline#checkline(2)
  Assert !org#headline#checkline(3)
  Assert !org#headline#checkline(4)
  Assert org#headline#checkline(5)

Given org (Headlines with todo);
#+TODO: A | B
* A A headline 2
* B A headline 3
* C A headline 4

Execute (org#headline#has_keyword):
  " fails the added things, as this doesn't create a 'file' and we're caching.
  Assert org#headline#has_keyword(getline(2))
  Assert org#headline#has_keyword(getline(3))
  Assert !org#headline#has_keyword(getline(4))

Execute (org#headline#keyword(text)):
  AssertEqual 'A', org#headline#keyword(getline(2))
  AssertEqual 'B', org#headline#keyword(getline(3))

Given org (Headlines);
Not a headline 1
* A headline   2
Not a headline 3
** A headline  4
* A headline   5
Not a headline 6

Execute (org#headline#find(lnum, same_level)):
  AssertEqual 2, org#headline#find(1, 0)
  AssertEqual 2, org#headline#find(2, 0)
  AssertEqual 4, org#headline#find(3, 0)
  AssertEqual 4, org#headline#find(4, 0)
  AssertEqual 5, org#headline#find(5, 0, 'W')
  AssertEqual 2, org#headline#find(6, 0, 'w')
  AssertEqual 2, org#headline#find(1, 2)
  AssertEqual 5, org#headline#find(3, 1)
  AssertEqual 5, org#headline#find(1, 0, 'bw')
  AssertEqual 0, org#headline#find(1, 0, 'bW')
  AssertEqual 2, org#headline#find(2, 0, 'bW')
  AssertEqual 2, org#headline#find(3, 0, 'b')
  AssertEqual 4, org#headline#find(4, 0, 'b')
  AssertEqual 5, org#headline#find(5, 0, 'b')
  AssertEqual 5, org#headline#find(6, 1, 'b')
  AssertEqual 2, org#headline#find(4, 1, 'b')

Execute (org#headline#level(lnum, ...)):
  AssertEqual 0,      org#headline#level(1)
  AssertEqual [1, 2], org#headline#level(2, 1)
  AssertEqual [1, 2], org#headline#level(3, 1)
  AssertEqual 2,      org#headline#level(4)
  AssertEqual 1,      org#headline#level(5)

Execute (org#section#range(lnum, inner) 1):
  AssertEqual [1, 1], org#section#range(1, 0)
  AssertEqual [1, 1], org#section#range(1, 1)
  AssertEqual [2, 4], org#section#range(2, 0)
  AssertEqual [3, 4], org#section#range(2, 1)
  AssertEqual [2, 4], org#section#range(3, 0)
  AssertEqual [3, 4], org#section#range(3, 1)
  AssertEqual [4, 4], org#section#range(4, 0)
  AssertEqual [0, 0], org#section#range(4, 1)
  AssertEqual [5, 6], org#section#range(5, 0)
  AssertEqual [6, 6], org#section#range(5, 1)
  AssertEqual [5, 6], org#section#range(6, 0)
  AssertEqual [6, 6], org#section#range(6, 1)

" " " Execute (org#motion_headline(count1, direction, same)):

" " " Execute (org#operator_headline(inner)):

" " " Execute (org#visual_headline(inner)):


" " " }}}

" Lists {{{

Execute (org#list#has_checkbox(text)):
  Assert  org#list#has_checkbox('- [ ] List item')
  Assert !org#list#has_checkbox('[ ] Not list item')

Execute (org#list#has_check(text)):
  Assert !org#list#has_check('- [ ] List item')
  Assert  org#list#has_check('- [x] List item')
  Assert  org#list#has_check('- [X] List item')
  Assert !org#list#has_check('[X] Not list item')

Execute (org#list#has_ordered_bullet(text)):
  Assert  org#list#has_ordered_bullet(' 1) list')
  Assert  org#list#has_ordered_bullet(' 1. list')
  Assert  org#list#has_ordered_bullet(' a) list')
  Assert  org#list#has_ordered_bullet(' a. list')
  Assert  org#list#has_ordered_bullet(' 10) list')
  Assert !org#list#has_ordered_bullet(' aa) list')

Execute (org#list#has_bullet(text)):
  Assert  org#list#has_bullet('- list')
  Assert  org#list#has_bullet('-')
  " Assert !org#list#has_bullet('*') " TODO
  Assert !org#list#has_bullet('h')
  Assert  org#list#has_bullet('h.')
  Assert  org#list#has_bullet('1.')

Execute (org#list#has_bullet(text)):
  Assert  org#list#has_bullet('- list')
  Assert  org#list#has_bullet('-')
  " Assert !org#list#has_bullet('*')
  Assert  org#list#has_bullet(' *')
  Assert  org#list#has_bullet(' + list')
  Assert  org#list#has_bullet(' 1) list')
  Assert  org#list#has_bullet(' a) list')
  Assert  org#list#has_bullet(' 10) list')

Given org (List);
- List item        1
- List item        2
  which is a long  3
  item             4
* A headline       5
  + List item      6
  1) List item     7
  20) List item    8
     still list    9
    + nested item  10
      - nest item  11
      a) nest item 12

Execute (org#list#item_range(lnum)):
  AssertEqual [1, 1], org#list#item_range(1)
  AssertEqual [2, 4], org#list#item_range(2)
  AssertEqual [2, 4], org#list#item_range(3)
  AssertEqual [2, 4], org#list#item_range(4)
  AssertEqual [0, 0], org#list#item_range(5)
  AssertEqual [6, 6], org#list#item_range(6)
  AssertEqual [7, 7], org#list#item_range(7)
  AssertEqual [8, 12], org#list#item_range(8)
  AssertEqual [8, 12], org#list#item_range(9)
  AssertEqual [10, 12], org#list#item_range(10)
  AssertEqual [11, 11], org#list#item_range(11)
  AssertEqual [12, 12], org#list#item_range(12)

Execute (org#list#item_start(lnum)):
  AssertEqual 1, org#list#item_start(1)
  AssertEqual 2, org#list#item_start(2)
  AssertEqual 2, org#list#item_start(3)
  AssertEqual 2, org#list#item_start(4)
  AssertEqual 0, org#list#item_start(5)
  AssertEqual 6, org#list#item_start(6)
  AssertEqual 7, org#list#item_start(7)
  AssertEqual 8, org#list#item_start(8)
  AssertEqual 8, org#list#item_start(9)
  AssertEqual 10, org#list#item_start(10)
  AssertEqual 11, org#list#item_start(11)
  AssertEqual 12, org#list#item_start(12)

Execute (org#list#item_end(lnum)):
  AssertEqual 1, org#list#item_end(1)
  AssertEqual 4, org#list#item_end(2)
  AssertEqual 4, org#list#item_end(3)
  AssertEqual 4, org#list#item_end(4)
  AssertEqual 0, org#list#item_end(5)
  AssertEqual 6, org#list#item_end(6)
  AssertEqual 7, org#list#item_end(7)
  AssertEqual 12, org#list#item_end(8)
  AssertEqual 12, org#list#item_end(9)
  AssertEqual 12, org#list#item_end(10)
  AssertEqual 11, org#list#item_end(11)
  AssertEqual 12, org#list#item_end(12)

Execute (org#list#item_is_ordered(lnum)):
  Assert !org#list#item_is_ordered(1)
  Assert !org#list#item_is_ordered(2)
  Assert !org#list#item_is_ordered(3)
  Assert !org#list#item_is_ordered(4)
  Assert !org#list#item_is_ordered(5)
  Assert !org#list#item_is_ordered(6)
  Assert  org#list#item_is_ordered(7)
  Assert  org#list#item_is_ordered(8)
  Assert  org#list#item_is_ordered(9)
  " TODO: decide if 10 and 11 should return true, because parent
  Assert !org#list#item_is_ordered(10)
  Assert !org#list#item_is_ordered(11)
  Assert  org#list#item_is_ordered(12)

Execute (org#list#checkline(lnum) 1):
  Assert  org#list#checkline(1)
  Assert  org#list#checkline(2)
  Assert  org#list#checkline(3)
  Assert  org#list#checkline(4)
  Assert !org#list#checkline(5)
  Assert  org#list#checkline(6)
  Assert  org#list#checkline(7)
  Assert  org#list#checkline(8)
  Assert  org#list#checkline(9)
  Assert  org#list#checkline(10)
  Assert  org#list#checkline(11)
  Assert  org#list#checkline(12)

Execute (org#list#parent_item_range(lnum)):
  AssertEqual [0, 0], org#list#parent_item_range(1)
  AssertEqual [0, 0], org#list#parent_item_range(2)
  AssertEqual [0, 0], org#list#parent_item_range(3)
  AssertEqual [0, 0], org#list#parent_item_range(4)
  AssertEqual [0, 0], org#list#parent_item_range(5)
  AssertEqual [0, 0], org#list#parent_item_range(6)
  AssertEqual [0, 0], org#list#parent_item_range(7)
  AssertEqual [0, 0], org#list#parent_item_range(8)
  AssertEqual [0, 0], org#list#parent_item_range(9)
  AssertEqual [8, 12], org#list#parent_item_range(10)
  AssertEqual [10, 12], org#list#parent_item_range(11)
  AssertEqual [10, 12], org#list#parent_item_range(12)

Execute (org#list#level(lnum)):
  AssertEqual 1, org#list#level(1)
  AssertEqual 1, org#list#level(2)
  AssertEqual 1, org#list#level(3)
  AssertEqual 1, org#list#level(4)
  AssertEqual 0, org#list#level(5)
  AssertEqual 1, org#list#level(6)
  AssertEqual 1, org#list#level(7)
  AssertEqual 1, org#list#level(8)
  AssertEqual 1, org#list#level(9)
  AssertEqual 2, org#list#level(10)
  AssertEqual 3, org#list#level(11)
  AssertEqual 3, org#list#level(12)

Given org (Lists);
- Item      1
text        2
- Item      3
  text      4
- Item      5
+ Item      6
  * Item    7
    1. Item 8
    3. Item 9
  * Item    10
- Item      11


- Item      14

" TODO: 'search' does not need to be tested. just 'find'
Execute (org#list#find(lnum)):
  AssertEqual 1, org#list#find(1)
  AssertEqual 3, org#list#find(2)
  AssertEqual 5, org#list#find(3, 'x')
  AssertEqual 6, org#list#find(5, 'x')
  AssertEqual 7, org#list#find(6, 'x')
  AssertEqual 10, org#list#find(9, 'x')
  AssertEqual 14, org#list#find(12)

Execute (org#list#find_same(lnum)):
  AssertEqual 1, org#list#find_same(1)
  AssertEqual 0, org#list#find_same(2)
  AssertEqual 5, org#list#find_same(3, 'x')
  AssertEqual 5, org#list#find_same(4, 'x')
  AssertEqual 0, org#list#find_same(5, 'x')
  AssertEqual 0, org#list#find_same(6, 'x')
  AssertEqual 10, org#list#find_same(7, 'x')
  AssertEqual 9, org#list#find_same(8, 'x')
  AssertEqual 0, org#list#find_same(9, 'x')
  AssertEqual 0, org#list#find_same(10, 'x')
  AssertEqual 0, org#list#find_same(11, 'x')
  AssertEqual 0, org#list#find_same(12, 'x')

" " Execute (org#get_prev_listitem(lnum, ...)):

" " }}}

" Properties {{{

Given org (Headline);
* A headline  1
:PROPERTIES:
:prop1: ab
:prop2: c d
:prop3: efg
:END:

some other text

Execute (org#property#parse):
  " AssertEqual [], org#property#parse(getline(1))  " throws error
  AssertEqual ['prop1', 'ab'], org#property#parse(getline(3))

Execute (org#property#get(lnum, name, ...)):
  AssertEqual 'ab', org#property#get(1, 'prop1')
  AssertEqual 'c d', org#property#get(3, 'prop2')
  AssertEqual 'efg', org#property#get(8, 'prop3')
  AssertEqual 'default', org#property#get(3, 'noprop', 'default')

Execute (org#property#all(lnum)):
  AssertEqual {'prop1': 'ab', 'prop2': 'c d', 'prop3': 'efg'}, org#property#all(7)


Given org (Empty);
* A headline    1
* A headline    2

Execute (Add and remove):
  call org#property#add(1, 'prop1', 1)
  call org#property#add(2, 'prop3', 'two')
  call org#property#add(2, 'prop4', 1)
  call org#property#add(2, 'prop2', 3, 1)
  call org#property#remove(1, 'prop4')

Expect org (properties);
* A headline    1
:PROPERTIES:
:prop1: 1
:prop2: 3
:prop3: two
:END:
* A headline    2

Given org ;
* A headline    1
:PROPERTIES:
:prop1: 1
:prop2: 3
:prop3: two
:END:
* A headline    7
* A headline    8
:PROPERTIES:
:END:

Execute (org#property#drawer_range(lnum, ...)):
  AssertEqual [2, 6], org#property#drawer_range(2)
  AssertEqual [3, 5], org#property#drawer_range(2, 1)
  AssertEqual [0, 0], org#property#drawer_range(7)
  AssertEqual [9, 10], org#property#drawer_range(9)
  AssertEqual [0, 0], org#property#drawer_range(9, 1)

" }}}

" Timestamps {{{

" org#timestamp#parse(text, ...)
" org#timestamp#parse_date(text)

Execute (1, org#timestamp#date2ftime(date), org#timestamp#ftime2date(time, ...)):
  " post epoch leap year cycle
  AssertEqual '1970-01-01 Thu', org#timestamp#ftime2date(org#timestamp#date2ftime('1970-01-01 Thu'))
  AssertEqual '2020-02-29 Sat', org#timestamp#ftime2date(org#timestamp#date2ftime('2020-02-29 Sat'))
  AssertEqual '2020-03-01 Sun', org#timestamp#ftime2date(org#timestamp#date2ftime('2020-03-01 Sun'))
  AssertEqual '2021-02-28 Sun', org#timestamp#ftime2date(org#timestamp#date2ftime('2021-02-28 Sun'))
  AssertEqual '2021-03-01 Mon', org#timestamp#ftime2date(org#timestamp#date2ftime('2021-03-01 Mon'))
  AssertEqual '2022-02-28 Mon', org#timestamp#ftime2date(org#timestamp#date2ftime('2022-02-28 Mon'))
  AssertEqual '2022-03-01 Tue', org#timestamp#ftime2date(org#timestamp#date2ftime('2022-03-01 Tue'))
  AssertEqual '2023-02-28 Tue', org#timestamp#ftime2date(org#timestamp#date2ftime('2023-02-28 Tue'))
  AssertEqual '2023-03-01 Wed', org#timestamp#ftime2date(org#timestamp#date2ftime('2023-03-01 Wed'))
  AssertEqual '1970-01-01 Thu', org#timestamp#ftime2date(org#timestamp#date2ftime('1970-01-01 Thu'))
  AssertEqual '1970-01-01 Thu', org#timestamp#ftime2date(org#timestamp#date2ftime('1970-01-01 Thu 12:34'), 0)
  AssertEqual '1970-01-01 Thu 00:00', org#timestamp#ftime2date(org#timestamp#date2ftime('1970-01-01 Thu 00:00'), 1)
  AssertEqual '1970-01-01 Thu 12:34', org#timestamp#ftime2date(org#timestamp#date2ftime('1970-01-01 Thu 12:34'))
  " This fails: helpful if we ever care about more accuracy
  " AssertEqual '2003-09-15 Mon', org#timestamp#ftime2date(org#timestamp#date2ftime('2003-09-15 Mon'))

" org#timestamp#check(lnum)
" org#timestamp#active(text)
" org#timestamp#get(lnum, ...)
" org#timestamp#remove(lnum)
" org#timestamp#add(lnum, timestamp)
" org#timestamp#prompt(lnum)

" }}}
